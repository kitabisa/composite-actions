version: '3'

silent: false

vars:
  NAMESPACE:
    sh: kubectl get ns | grep -v -e maxwell -e NAME -e slack-devbot-helper | awk '{ print $1 }'

tasks:
  destroy-dev:
    desc: Destroy dev
    cmds:
      - for: { var: NAMESPACE }
        cmd: helm ls -n {{.ITEM}} | grep "\-dev" | awk '{ print $1 }' | xargs -I % helm delete -n {{.ITEM}} % 2> /dev/null
        ignore_error: true

  create-mysql-db:
    desc: Create a MySQL DB
    ignore_error: true
    env:
      APP_NAME:
        sh: make get-app-name
    cmds:
      - |
        mysql -h ${LOGIN_DB_HOST} -u root -p${LOGIN_DB_PASSWORD} -e "DROP DATABASE IF EXISTS ${APP_NAME}_${DB_NAME};
        CREATE DATABASE ${APP_NAME}_${DB_NAME};
        CREATE USER IF NOT EXISTS '${APP_NAME}'@'%' IDENTIFIED BY '${DB_DEV_PASSWORD}';
        GRANT ALL PRIVILEGES ON *.* TO '${APP_NAME}'@'%' WITH GRANT OPTION;"

  create-pgsql-db:
    desc: "Create a PostgreSQL DB"
    ignore_error: true
    env:
      PGPASSWORD: '{{.LOGIN_DB_PASSWORD}}'
      APP_NAME:
        sh: make get-app-name
    cmds:
      - |
        #!/bin/bash
        # Create DB and user then grant user
        psql -h ${LOGIN_DB_HOST} -U postgres -c "DROP DATABASE IF EXISTS ${APP_NAME}_${DB_NAME};" -c "CREATE DATABASE ${APP_NAME}_${DB_NAME};"
        echo "DB ${APP_NAME}_${DB_NAME} has been created."

        # Create user and grant user
        psql -h ${LOGIN_DB_HOST} -U postgres -c "DROP USER IF EXISTS ${APP_NAME};" -c "CREATE USER ${APP_NAME} WITH PASSWORD '${DB_DEV_PASSWORD}';" -c "GRANT ALL PRIVILEGES ON DATABASE ${APP_NAME}_${DB_NAME} TO ${APP_NAME};"
        echo "User ${APP_NAME} has been granted to ${APP_NAME}_${DB_NAME}."

  delete-pgsql-db:
    desc: "Delete a Single PostgreSQL DB"
    ignore_error: true
    env:
      PGPASSWORD: '{{.LOGIN_DB_PASSWORD}}'
      APP_NAME:
        sh: make get-app-name
    cmds:
      - |
        #!/bin/bash
        # Execute the DROP DATABASE command
        psql -U postgres -h "$LOGIN_DB_HOST" -c "DROP DATABASE ${APP_NAME}_${DB_NAME};"
        echo "Database ${APP_NAME}_${DB_NAME} has been deleted."

  delete-mysql-db:
    desc: "Delete a Single Mysql DB"
    ignore_error: true
    env:
      APP_NAME:
        sh: make get-app-name
    cmds:
      - |
        #!/bin/bash
        # Execute the DROP DATABASE command
        mysql -h ${LOGIN_DB_HOST} -u root -p${LOGIN_DB_PASSWORD} -e "DROP DATABASE ${APP_NAME}_${DB_NAME};"
        echo "Database ${APP_NAME}_${DB_NAME} has been deleted."

  delete-all-mysql-db:
    desc: "Delete All Mysql DB"
    ignore_error: true
    silent: false
    cmds:
      - |
        #!/bin/bash
        databases=$(mysql -h ${LOGIN_DB_HOST} -u root -p${LOGIN_DB_PASSWORD} -e "SHOW DATABASES;" | grep -Ev "(Database|information_schema|performance_schema|mysql|sys)")

        # Loop through each database and drop it
        for db in $databases; do
          echo "Dropping database: $db"
          mysql -h ${LOGIN_DB_HOST} -u root -p${LOGIN_DB_PASSWORD} -e "DROP DATABASE $db;"
        done
        echo "All user databases have been dropped."

  delete-all-pgsql-db:
    desc: "Delete All Mysql DB"
    ignore_error: true
    silent: false
    env:
      PGPASSWORD: '{{.LOGIN_DB_PASSWORD}}'
    cmds:
      - |
        # Get a list of databases excluding the system databases
        databases=$(psql -U postgres -h "$LOGIN_DB_HOST" -t -c "SELECT datname FROM pg_database WHERE datname NOT IN ('postgres', 'template0', 'template1');")

        # Loop through each database and drop it
        for db in $databases; do
          echo "Dropping database: $db"
          psql -U postgres -h "$LOGIN_DB_HOST" -c "DROP DATABASE \"$db\";"
        done

        echo "All user databases have been dropped."
