name: "Makefile build push deploy"
description: "Makefile build push deploy"

inputs:
  project_id:
    required: false
    description: "GCP project id"
    type: string

  artifact_registry_host:
    required: true
    description: "Artifact registry host"
    type: string

  artifact_registry_project_id:
    required: false
    description: "Artifact registry project id"
    type: string

  install:
    required: false
    description: "make install"
    default: false
    type: string

  config:
    required: false
    description: "make config"
    default: false
    type: string

  build:
    required: false
    description: "make build"
    default: false
    type: string

  build-kj:
    required: false
    description: "make build-kj"
    default: false
    type: string

  package:
    required: false
    description: "make package"
    default: false
    type: string

  package-kj:
    required: false
    description: "make package-kj"
    default: false
    type: string

  deploy:
    required: false
    description: "make deploy"
    default: false
    type: string

  deploy-kj:
    required: false
    description: "make deploy-kj"
    default: false
    type: string

  deploy_test:
    required: false
    description: "make deploy-test"
    default: false
    type: string

  test:
    required: false
    description: "make test"
    default: false
    type: string

  custom_command_flag:
    required: false
    description: "custom command flag"
    default: 'false'

  custom_command:
    required: false
    description: "custom command"
    default: ""

  rollback:
    required: false
    description: "make rollback"
    default: false
    type: string

  rollback_release:
    required: false
    description: "rollback release"
    type: string

  rollback_revision:
    required: false
    description: "rollback revision"
    type: string

  prune:
    required: false
    description: "make prune"
    default: false
    type: string

  prune_all:
    required: false
    description: "make prune-all"
    default: false
    type: string

  destroy:
    required: false
    description: "make destroy"
    default: false
    type: string

  param:
    required: false
    description: "argument for service name"
    default: ""
    type: string

  working_directory:
    required: false
    description: "Set working directory"
    default: "."
    type: string

  using_cdn:
    required: false
    description: "Setup cdn for static assets"
    default: false
    type: string

  cdn_keep_latest_version:
    required: false
    description: "CDN keep latest version length"
    default: "2"
    type: string

outputs:
  build-time:
    description: "Define build time"
    value: ${{ steps.build-app.outputs.duration }}

  cdn-upload-path:
    description: "Define cdn upload path"
    value: ${{ steps.cdn-upload.outputs.path }}

  cdn-delete-path:
    description: "Define cdn delete path"
    value: ${{ steps.cdn-delete.outputs.path }}

runs:
  using: "composite"
  steps:
    - name: Install dependencies
      if: "${{ inputs.install == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        make install

    - name: Generate config for build time
      if: "${{ inputs.config == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DOCKER_REPOSITORY: ${{ inputs.artifact_registry_host }}/${{ inputs.project_id }}/images
        CHARTS_REPOSITORY: asia-southeast1-docker.pkg.dev/${{ inputs.artifact_registry_project_id }}/charts
      run: |-
        make config

    - name: Build application
      id: build-app
      if: "${{ inputs.build == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        start=$(date +%s)
        make build
        echo "duration=$(($(date +%s)-$start))" >> $GITHUB_OUTPUT

    - name: Build application
      id: build-app-kj
      if: "${{ inputs.build-kj == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        start=$(date +%s)
        make build-kj service-kj=${{ inputs.param }}
        echo "duration=$(($(date +%s)-$start))" >> $GITHUB_OUTPUT

    - name: Build and push docker image
      if: "${{ inputs.package == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DOCKER_REPOSITORY: ${{ inputs.artifact_registry_host }}/${{ inputs.project_id }}/images
      run: |-
        make package

    - name: Build and push docker image
      if: "${{ inputs.package-kj == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DOCKER_REPOSITORY: ${{ inputs.artifact_registry_host }}/${{ inputs.project_id }}/images
      run: |-
        make package-kj service-kj=${{ inputs.param }}

    - name: Run unit test
      if: "${{ (inputs.test == 'true') && (inputs.custom_command_flag == 'true') }}"
      shell: bash
      run: |-
        ${{ inputs.custom_command }} &&
        make test

    - name: Deploy via helmfile
      if: "${{ (inputs.deploy == 'true') && (inputs.deploy_test == 'false') }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DOCKER_REPOSITORY: ${{ inputs.artifact_registry_host }}/${{ inputs.project_id }}/images
        CHARTS_REPOSITORY: asia-southeast1-docker.pkg.dev/${{ inputs.artifact_registry_project_id }}/charts
        GIT_SOURCE: $(echo "${{ github.repository }}" | cut -d'/' -f2)
      run: |-
        make deploy

    - name: Deploy-kj via helmfile
      if: "${{ (inputs.deploy == 'false') && (inputs.deploy-kj == 'true') }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DOCKER_REPOSITORY: ${{ inputs.artifact_registry_host }}/${{ inputs.project_id }}/images
        CHARTS_REPOSITORY: asia-southeast1-docker.pkg.dev/${{ inputs.artifact_registry_project_id }}/charts
        GIT_SOURCE: $(echo "${{ github.repository }}" | cut -d'/' -f2)
      run: |-
        make deploy-kj service-kj=${{ inputs.param }}

    - name: Deploy-test via helmfile
      if: "${{ inputs.deploy_test == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DOCKER_REPOSITORY: ${{ inputs.artifact_registry_host }}/${{ inputs.project_id }}/images
        CHARTS_REPOSITORY: asia-southeast1-docker.pkg.dev/${{ inputs.artifact_registry_project_id }}/charts
        GIT_SOURCE: $(echo "${{ github.repository }}" | cut -d'/' -f2)
      run: |-
        make deploy-test

    - name: Destroy via helmfile
      if: "${{ inputs.destroy == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        make destroy || true

    - name: Rollback deployment
      if: "${{ inputs.rollback == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        RELEASE: ${{ inputs.rollback_release }}
        REVISION: ${{ inputs.rollback_revision }}
      run: |-
        make rollback

    - name: Get Helm history
      if: "${{ inputs.prune == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      id: helm-history
      run: |-
        echo "length=$(make helm-history-length)" >> $GITHUB_OUTPUT

    - name: Get Helm revision
      if: "${{ inputs.prune == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      id: helm-revision
      run: |-
        echo "oldest=$(make helm-oldest-revision)" >> $GITHUB_OUTPUT

    - name: Get Helm values
      if: "${{ (inputs.prune == 'true') && (steps.helm-revision.outputs.oldest != 0) }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      id: helm-values
      env:
        REVISION: ${{ steps.helm-revision.outputs.oldest }}
      run: |-
        echo "image-tag=$(make helm-image-tag)" >> $GITHUB_OUTPUT

    - name: Get Image timestamp
      if: "${{ (inputs.prune == 'true') && (steps.helm-values.outputs.image-tag != '') }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      id: helm-timestamp
      env:
        DOCKER_REPOSITORY: ${{ inputs.artifact_registry_host }}/${{ inputs.project_id }}/images
        REVISION_IMAGE: ${{ steps.helm-values.outputs.image-tag }}
      run: |-
        echo "image-timestamp=$(make helm-image-timestamp)" >> $GITHUB_OUTPUT

    - name: Remove unused Docker images
      if: "${{ (inputs.prune == 'true') && (steps.helm-timestamp.outputs.image-timestamp != '') }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DOCKER_REPOSITORY: ${{ inputs.artifact_registry_host }}/${{ inputs.project_id }}/images
        REVISION_TIMESTAMP: ${{ steps.helm-timestamp.outputs.image-timestamp }}
        IMAGE_TAG: ${{ steps.helm-values.outputs.image-tag }}
      run: |-
        make prune || true

    - name: Remove all unused Docker images
      if: "${{ inputs.prune_all == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DOCKER_REPOSITORY: ${{ inputs.artifact_registry_host }}/${{ inputs.project_id }}/images
      run: |-
        make prune-all || true

    - name: Get cdn upload path
      if: "${{ inputs.using_cdn == 'true' }}"
      id: cdn-upload
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        echo "path=$(make get-cdn-upload-path)" >> $GITHUB_OUTPUT

    - name: Get cdn delete path
      if: "${{ inputs.using_cdn == 'true' }}"
      id: cdn-delete
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        SKIP_VERSION: ${{ inputs.cdn_keep_latest_version }}
      run: |-
        echo "path=$(make get-cdn-delete-path)" >> $GITHUB_OUTPUT
