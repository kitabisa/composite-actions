name: "Makefile build push deploy"
description: "Makefile build push deploy"

inputs:
  project_id:
    required: true
    description: "GCP project id"
    type: string

  gcr_host:
    required: false
    description: "GCP container registry host"
    type: string

  chartmuseum_host:
    required: false
    description: "ChartMuseum host"
    type: string

  chartmuseum_user:
    required: false
    description: "ChartMuseum user"
    type: string

  chartmuseum_pass:
    required: false
    description: "ChartMuseum password"
    type: string

  install:
    required: false
    description: "make install"
    default: false
    type: boolean

  config:
    required: false
    description: "make config"
    default: false
    type: boolean

  build:
    required: false
    description: "make build"
    default: false
    type: boolean

  package:
    required: false
    description: "make package"
    default: false
    type: boolean

  deploy:
    required: false
    description: "make deploy"
    default: false
    type: boolean

  rollback:
    required: false
    description: "make rollback"
    default: false
    type: boolean

  rollback_release:
    required: false
    description: "rollback release"
    type: string

  rollback_revision:
    required: false
    description: "rollback revision"
    type: string

  prune:
    required: false
    description: "make prune"
    default: false
    type: boolean

  working_directory:
    required: false
    description: "Set working directory"
    default: "."
    type: string

  preview_url:
    required: false
    description: "Set preview url"
    default: ""
    type: string

runs:
  using: "composite"
  steps:
    - name: Setup yq
      uses: chrisdickinson/setup-yq@latest
      with:
        yq-version: v4.11.2

    - name: Setup Helm
      uses: azure/setup-helm@v1

    - name: Setup Helmfile
      uses: kitabisa/actions/setup-helmfile@master

    - name: Get Helm history
      if: "${{ inputs.prune == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      id: helm-history
      run: |-
        echo "::set-output name=length::$(make helm-history-length)"

    - name: Get Helm revision
      if: "${{ (inputs.prune == 'true') && (steps.helm-history.outputs.length >= 10) }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      id: helm-revision
      run: |-
        echo "::set-output name=oldest::$(make helm-oldest-revision)"

    - name: Get Helm values
      if: "${{ (inputs.prune == 'true') && (steps.helm-revision.outputs.oldest != 0) }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      id: helm-values
      env:
        REVISION: ${{ steps.helm-revision.outputs.oldest }}
      run: |-
        echo "::set-output name=image-tag::$(make helm-image-tag)"

    - name: Get Image timestamp
      if: "${{ (inputs.prune == 'true') && (steps.helm-values.outputs.image-tag != '') }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      id: helm-timestamp
      env:
        DOCKER_REPOSITORY: ${{ inputs.gcr_host }}/${{ inputs.project_id }}
        REVISION_IMAGE: ${{ steps.helm-values.outputs.image-tag }}
      run: |-
        echo "::set-output name=image-timestamp::$(make helm-image-timestamp)"

    - name: Install dependencies
      if: "${{ inputs.install == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        make install

    - name: Generate config for build time
      if: "${{ inputs.config == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        CHARTMUSEUM_HOST: ${{ inputs.chartmuseum_host }}
        CHARTMUSEUM_USER: ${{ inputs.chartmuseum_user }}
        CHARTMUSEUM_PASS: ${{ inputs.chartmuseum_pass }}
        DOCKER_REPOSITORY: ${{ inputs.gcr_host }}/${{ inputs.project_id }}
      run: |-
        make config

    - name: Build application
      if: "${{ inputs.build == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        make build

    - name: Build and push docker image
      if: "${{ inputs.package == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DOCKER_REPOSITORY: ${{ inputs.gcr_host }}/${{ inputs.project_id }}
      run: |-
        make package

    - name: Deploy via helmfile
      if: "${{ inputs.deploy == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        CHARTMUSEUM_HOST: ${{ inputs.chartmuseum_host }}
        CHARTMUSEUM_USER: ${{ inputs.chartmuseum_user }}
        CHARTMUSEUM_PASS: ${{ inputs.chartmuseum_pass }}
        DOCKER_REPOSITORY: ${{ inputs.gcr_host }}/${{ inputs.project_id }}
      run: |-
        make deploy

    - name: Remove unused Docker images
      if: "${{ (inputs.prune == 'true') && (steps.helm-timestamp.outputs.image-timestamp != '') }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        DOCKER_REPOSITORY: ${{ inputs.gcr_host }}/${{ inputs.project_id }}
        REVISION_TIMESTAMP: ${{ steps.helm-timestamp.outputs.image-timestamp }}
        REVISION_IMAGE: ${{ steps.helm-values.outputs.image-tag }}
      run: |-
        make prune || true

    - name: Rollback deployment
      if: "${{ inputs.rollback == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        RELEASE: ${{ inputs.rollback_release }}
        REVISION: ${{ inputs.rollback_revision }}
      run: |-
        make rollback

    - name: Comment preview url
      if: "${{ inputs.preview_url != '' }}"
      uses: KeisukeYamashita/create-comment@v1
      with:
        comment: "Open the application by accessing these URL: [${{ inputs.preview_url }}](https://${{ inputs.preview_url }})"
