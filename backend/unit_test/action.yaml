name: "Test Coverage"
description: "Build and push docker image"

inputs:
  working_directory:
    required: false
    description: "Set working directory"
    default: "."
    type: string

  gh_user:
    required: true
    description: "gh user"

  gh_token:
    required: true
    description: "gh token"

  go_version:
    required: false
    description: "go version"
    default: "1.18"

  custom_command_flag:
    required: false
    description: "custom command flag"
    default: "false"

  custom_command:
    required: false
    description: "custom command"
    default: "echo no command"

  unit_test_command:
    required: false
    description: "unit test command"
    default: "go test ./internal/... -coverprofile=coverage.out -covermode=atomic"

  hash_files:
    required: false
    description: "hash files"
    default: "**"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.gh_token }}

    - name: Setup Golang
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go_version }}
        cache: false

    - name: Start caching go
      shell: bash
      run: |
        echo "Start retrieving cache"

    - name: Setup Golang caches
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-golang-${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}
        restore-keys: |
          ${{ runner.os }}-golang-

    - name: End caching go
      shell: bash
      run: |
        echo "End retrieving cache"

    - name: Configure Git for private modules
      env:
        USER: ${{ inputs.gh_user }}
        TOKEN: ${{ inputs.gh_token }}
      shell: bash
      run: git config --global url."https://${USER}:${TOKEN}@github.com".insteadOf "https://github.com"

    - name: Set base value
      shell: bash
      run: |
        echo "current_coverage=0" >> $GITHUB_ENV
        echo "master_coverage=0" >> $GITHUB_ENV

    - name: Generate Master Coverage
      id: unit-test-master
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        echo "master_coverage=$(cat coverage-master.txt)" >> $GITHUB_ENV

    - name: Custom Command
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: "${{ inputs.custom_command_flag == 'true' }}"
      run: ${{ inputs.custom_command }}

    - name: Run Unit tests
      id: unit-test-current
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        ${{ inputs.unit_test_command }}
        echo "current_coverage=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')" >> $GITHUB_ENV

    - name: Comment PR and Set Fail Result
      if: fromJSON(env.current_coverage) < fromJSON(env.master_coverage)
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        message: |
          ##  ⚠⚠️ Unit Test Coverage ⚠⚠
          ```
          Current branch coverage : ${{ env.current_coverage }}
          Master branch coverage : ${{ env.master_coverage }}
          Condition: Current branch coverage must be bigger or equal than master branch coverage.
          ```
          <b> PR Blocked ❌. Please fix your unit test coverage </b>

    - name: Coverage below master, Fail PR
      if: fromJSON(env.current_coverage) < fromJSON(env.master_coverage)
      shell: bash
      run: |
        echo "::error :: unit test coverage is below master"
        exit 1

    - name: Comment PR
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        message: |
          ##  ✅✅ Unit Test Coverage ✅✅
          ```
          Current branch coverage : ${{ env.current_coverage }}
          Master branch coverage : ${{ env.master_coverage }}
          Condition: Current branch coverage must be bigger or equal than master branch coverage.
          ```
          PR Coverage check passed.
