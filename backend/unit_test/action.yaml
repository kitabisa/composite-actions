name: "Test Coverage"
description: "Build and push docker image"

inputs:
  gh_user:
    required: true
    description: "github user"

  gh_token:
    required: true
    description: "github token"

  working_directory:
    required: false
    description: "Set working directory"
    default: "."
    type: string

  go_version:
    required: false
    description: "go version"
    default: "^1.13.1"

  custom_command_flag:
    required: false
    description: "custom command flag"
    default: "false"

  custom_command:
    required: false
    description: "custom command"
    default: "echo no command"

  unit_test_command:
    required: false
    description: "unit test command"
    default: "go test ./internal/... -coverprofile=coverage.out -covermode=atomic"

  hash_files:
    required: false
    description: "hash files"
    default: "go.sum"

runs:
  using: "composite"
  steps:
    - name: Set base value
      shell: bash
      run: |
        echo "current_coverage=0" >> $GITHUB_ENV
        echo "master_coverage=0" >> $GITHUB_ENV

    - name: Checking out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.gh_token }}

    - name: Setuptools backend
      uses: kitabisa/composite-actions/backend/tools/setuptools@b2106acf15911301ec6542be7c68e2f43160617e
      with:
        setup_git: true
        setup_go: true
        go_version: ${{ inputs.go_version }}
        gh_user: ${{ inputs.gh_user }}
        gh_token: ${{ inputs.gh_token }}
        hash_files: ${{ inputs.hash_files }}

    - name: Generate Master Coverage
      id: unit-test-master
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        echo "master_coverage=$(cat coverage-master.txt)" >> $GITHUB_ENV

    - name: Custom Command
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: "${{ inputs.custom_command_flag == 'true' }}"
      run: ${{ inputs.custom_command }}

    - name: Run Unit tests
      id: unit-test-current
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        ${{ inputs.unit_test_command }}
        echo "current_coverage=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')" >> $GITHUB_ENV

    - name: Comment PR and Set Fail Result
      if: fromJSON(env.current_coverage) < fromJSON(env.master_coverage)
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        message: |
          ##  ⚠⚠️ Unit Test Coverage ⚠⚠
          ```
          Current branch coverage : ${{ env.current_coverage }}
          Master branch coverage : ${{ env.master_coverage }}
          Condition: Current branch coverage must be bigger or equal than master branch coverage.
          ```
          <b> PR Blocked ❌. Please fix your unit test coverage </b>

    - name: Coverage below master, Fail PR
      if: fromJSON(env.current_coverage) < fromJSON(env.master_coverage)
      shell: bash
      run: |
        echo "::error :: unit test coverage is below master"
        exit 1

    - name: Comment PR
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        message: |
          ##  ✅✅ Unit Test Coverage ✅✅
          ```
          Current branch coverage : ${{ env.current_coverage }}
          Master branch coverage : ${{ env.master_coverage }}
          Condition: Current branch coverage must be bigger or equal than master branch coverage.
          ```
          PR Coverage check passed.
