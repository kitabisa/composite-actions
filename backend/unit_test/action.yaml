name: "Test Coverage"
description: "Build and push docker image"

inputs:
  working_directory:
    required: false
    description: "Set working directory"
    default: "."
    type: string

  gh_user:
    required: true
    description: "gh user"

  gh_token:
    required: true
    description: "gh token"

  go_version:
    required: false
    description: "go version"
    default: "~1.22"

  custom_command_flag:
    required: false
    description: "custom command flag"
    default: "false"

  custom_command:
    required: false
    description: "custom command"
    default: "echo no command"

  unit_test_command:
    required: false
    description: "unit test command"
    default: "go test ./internal/... -coverprofile=coverage.out -covermode=atomic"

  hash_files:
    required: false
    description: "hash files"
    default: "**"

  default_unit_test:
    required: false
    description: "default unit test"
    default: "true"

  setup_go_cache:
    required: false
    description: "go version"
    default: "false"

  setup_action_cache:
    required: false
    description: "setup cache"
    default: "true"

  cache_key_suffix:
    required: false
    description: Optional cache key suffix.
    default: ""

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.gh_token }}

    - name: Extract Go version
      id: go-version
      shell: bash
      run: |
        GO_VERSION=$(grep -E '^go [0-9]+\.[0-9]+' go.mod | awk '{print $2}')
        echo "Go version found: $GO_VERSION"
        echo "go_version=$GO_VERSION" >> $GITHUB_ENV

    - name: Setup Golang
      uses: actions/setup-go@v5
      with:
        cache: ${{ inputs.setup_go_cache }}
        go-version: ${{ env.go_version }}

    # - name: Sleep debug only
    #   shell: bash
    #   run: sleep 120

    - name: Determine Golang cache paths and construct cache key
      id: golang-env
      run: |
        echo "build-cache-path=$(go env GOCACHE)" >>"$GITHUB_OUTPUT"
        echo "module-cache-path=$(go env GOMODCACHE)" >>"$GITHUB_OUTPUT"
        cacheKeyRoot="${{ runner.os }}-golang${{ inputs.cache_key_suffix && format('-{0}',inputs.cache_key_suffix) }}-"
        echo "cache-key-restore=$cacheKeyRoot" >>"$GITHUB_OUTPUT"
        echo "cache-key=${cacheKeyRoot}${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}" >>"$GITHUB_OUTPUT"
      shell: bash

    - name: Clean up Go cache
      shell: bash
      run: |
        sudo rm -rf ~/go/pkg/mod
        sudo rm -rf ~/.cache/go-build

    - name: Setup Golang cache
      if: ${{ inputs.setup_action_cache == 'true' }}
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.golang-env.outputs.build-cache-path }}
          ${{ steps.golang-env.outputs.module-cache-path }}
        key: ${{ steps.golang-env.outputs.cache-key }}
        restore-keys: |
          ${{ steps.golang-env.outputs.cache-key-restore }}

    - name: Configure Git for private modules
      env:
        USER: ${{ inputs.gh_user }}
        TOKEN: ${{ inputs.gh_token }}
      shell: bash
      run: git config --global url."https://${USER}:${TOKEN}@github.com".insteadOf "https://github.com"

    - name: Set base value
      shell: bash
      run: |
        echo "current_coverage=0" >> $GITHUB_ENV
        echo "master_coverage=0" >> $GITHUB_ENV

    - name: Generate Master Coverage
      id: unit-test-master
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        echo "master_coverage=$(cat coverage-master.txt)" >> $GITHUB_ENV

    - name: Custom Command
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: "${{ inputs.custom_command_flag == 'true' }}"
      run: ${{ inputs.custom_command }}

    - name: Run Unit tests
      id: unit-test-current
      if: "${{ inputs.default_unit_test == 'true' }}"
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        ${{ inputs.unit_test_command }}

    - name: Run Go Test Action
      if: "${{ inputs.default_unit_test == 'false' }}"
      uses: robherley/go-test-action@v0
      with:
        moduleDirectory: ${{ inputs.working_directory }}
        testArguments: ${{ inputs.unit_test_command }}
      continue-on-error: true

    - name: Generate Current Coverage
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        ls -al
        echo "current_coverage=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')" >> $GITHUB_ENV
        echo $(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')

    - name: Comment PR and Set Fail Result
      if: fromJSON(env.current_coverage) < fromJSON(env.master_coverage)
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        message: |
          ##  ⚠⚠️ Unit Test Coverage ⚠⚠
          ```
          Current branch coverage : ${{ env.current_coverage }}
          Master branch coverage : ${{ env.master_coverage }}
          Condition: Current branch coverage must be bigger or equal than master branch coverage.
          ```
          <b> PR Blocked ❌. Please fix your unit test coverage </b>

    - name: Coverage below master, Fail PR
      if: fromJSON(env.current_coverage) < fromJSON(env.master_coverage)
      shell: bash
      run: |
        echo "::error :: unit test coverage is below master"
        exit 1

    - name: Comment PR
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        message: |
          ##  ✅✅ Unit Test Coverage ✅✅
          ```
          Current branch coverage : ${{ env.current_coverage }}
          Master branch coverage : ${{ env.master_coverage }}
          Condition: Current branch coverage must be bigger or equal than master branch coverage.
          ```
          PR Coverage check passed.
