name: "CI Build"
description: "Build and push docker image"

outputs:
  cache_hit:
    description: "Indicates whether the Golang cache was hit"
    value: ${{ steps.cache-restore.outputs.cache-hit }}
inputs:
  # Required
  artifact_registry_host:
    required: true
    description: "Artifact registry host"
    type: string

  artifact_registry_project_id:
    required: true
    description: "Artifact registry project id"
    type: string

  credentials_json:
    required: true
    description: "GCP credentials services account"
    type: string

  project_id:
    required: true
    description: "GCP project id"
    type: string

  gh_user:
    required: true
    description: "gh user"

  gh_token:
    required: true
    description: "gh token"

  go_version:
    required: false
    description: "go version"
    default: "~1.22"

  custom_command_flag:
    required: false
    description: "custom command flag"
    default: "false"

  custom_command:
    required: false
    description: "custom command"
    default: "echo no command"

  param:
    required: false
    description: "argument for service name"
    default: ""
    type: string

  build:
    required: false
    description: "Run make build"
    default: true
    type: string

  build-kj:
    required: false
    description: "Run make build-kj"
    default: false
    type: string

  build_push_image:
    required: false
    description: "build and push image for deployment"
    default: "false"

  build_push_image_kj:
    required: false
    description: "build and push image for deployment kj"
    default: "false"

  working_directory:
    required: false
    description: "Set working directory"
    default: "."
    type: string

  hash_files:
    required: false
    description: "hashFiles location"
    default: "**"

  setup_go:
    required: false
    description: "setup go"
    default: "true"

  setup_action_cache:
    required: false
    description: "setup cache"
    default: "true"

  setup_checkout:
    required: false
    description: "setup checkout"
    default: "true"

  setup_go_cache:
    required: false
    description: "go version"
    default: "false"

  cache_key_suffix:
    required: false
    description: "cache key suffix"
    default: ""

runs:
  using: "composite"
  steps:
    - name: Checkout
      if: ${{ inputs.setup_checkout == 'true' }}
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.gh_token }}

    - name: Extract Go version
      id: go-version
      shell: bash
      run: |
        GO_VERSION=$(grep -E '^go [0-9]+\.[0-9]+' go.mod | awk '{print $2}')
        echo "Go version found: $GO_VERSION"
        echo "go_version=$GO_VERSION" >> $GITHUB_ENV

    - name: Setup Golang
      if: ${{ inputs.setup_go == 'true' }}
      uses: actions/setup-go@v5
      with:
        cache: ${{ inputs.setup_go_cache }}
        go-version: ${{ env.go_version }}

    - name: Get Date
      id: get-date
      run: |
        echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
      shell: bash

    - name: Determine Golang cache paths and construct cache key
      id: golang-env
      run: |
        echo "build-cache-path=$(go env GOCACHE)" >>"$GITHUB_OUTPUT"
        echo "module-cache-path=$(go env GOMODCACHE)" >>"$GITHUB_OUTPUT"
        cacheKeyRoot="${{ runner.os }}-golang${{ inputs.cache_key_suffix && format('-{0}',inputs.cache_key_suffix) }}-${{ steps.get-date.outputs.date }}"
        echo "cache-key-restore=$cacheKeyRoot" >>"$GITHUB_OUTPUT"
        echo "cache-key=${cacheKeyRoot}-${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}" >>"$GITHUB_OUTPUT"
      shell: bash

    - name: Setup Golang cache
      if: ${{ inputs.setup_action_cache == 'true' }}
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.golang-env.outputs.build-cache-path }}
          ${{ steps.golang-env.outputs.module-cache-path }}
        key: ${{ steps.golang-env.outputs.cache-key }}
        restore-keys: |
          ${{ steps.golang-env.outputs.cache-key-restore }}
          ${{ steps.golang-env.outputs.cache-key }}

    - name: Output cache status
      shell: bash
      run: echo "cache_hit=${{ steps.cache-restore.outputs.cache-hit }}" >> "$GITHUB_OUTPUT"

    - name: Configure Git for private modules
      env:
        USER: ${{ inputs.gh_user }}
        TOKEN: ${{ inputs.gh_token }}
      shell: bash
      run: git config --global url."https://${USER}:${TOKEN}@github.com".insteadOf "https://github.com"

    - name: setup custom command
      if: ${{ inputs.custom_command_flag == 'true' }}
      shell: bash
      run: ${{ inputs.custom_command }}

    - name: Setuptools infra
      uses: kitabisa/composite-actions/infra/tools/setuptools@v2
      with:
        setup_buildx: true

    - name: Setup Gcloud credential
      uses: kitabisa/composite-actions/infra/tools/gcloud@v2
      with:
        artifact_registry_host: ${{ inputs.artifact_registry_host }}
        project_id: ${{ inputs.project_id }}
        credentials_json: ${{ inputs.credentials_json }}
        gke_creds: false

    - name: Start build
      shell: bash
      run: |
        echo "Start building application"

    - name: Build application
      id: build-app
      uses: kitabisa/composite-actions/infra/tools/makefile@v2
      with:
        param: ${{ inputs.param }}
        build: ${{ inputs.build }}
        build-kj: ${{ inputs.build-kj }}
        working_directory: ${{ inputs.working_directory }}
        project_id: ${{ inputs.project_id }}
        artifact_registry_host: ${{ inputs.artifact_registry_host }}
        artifact_registry_project_id: ${{ inputs.artifact_registry_project_id }}
        package: ${{ inputs.build_push_image }}
        package-kj: ${{ inputs.build_push_image_kj }}
