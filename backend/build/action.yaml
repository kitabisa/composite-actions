name: "CI Build"
description: "Build and push docker image"

inputs:
  # Required
  artifact_registry_host:
    required: true
    description: "Artifact registry host"
    type: string

  artifact_registry_project_id:
    required: true
    description: "Artifact registry project id"
    type: string

  credentials_json:
    required: true
    description: "GCP credentials services account"
    type: string

  project_id:
    required: true
    description: "GCP project id"
    type: string

  gh_user:
    required: true
    description: "gh user"

  gh_token:
    required: true
    description: "gh token"

  go_version:
    required: false
    description: "go version"
    default: "^1.13.1"

  custom_command_flag:
    required: false
    description: "custom command flag"
    default: "false"

  custom_command:
    required: false
    description: "custom command"
    default: "echo no command"

  build:
    required: false
    description: "Run make build"
    default: true
    type: string

  build_push_image:
    required: false
    description: "build and push image for deployment"
    default: "false"

  working_directory:
    required: false
    description: "Set working directory"
    default: "."
    type: string

  hash_files:
    required: false
    description: "hashFiles location"
    default: "**"

  setup_go:
    required: false
    description: "setup go"
    default: true

  setup_restore_cache:
    required: false
    description: "setup cache"
    default: true

  setup_save_cache:
    required: false
    description: "setup cache"
    default: true

  setup_checkout:
    required: false
    description: "setup checkout"
    default: true
outputs:
  build-app-status:
    description: "build app status"
    value: ${{steps.build-app.outputs.status}}

runs:
  using: "composite"
  steps:
    - name: Checkout
      if: ${{ inputs.setup_checkout == 'true' }}
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.gh_token }}

    - name: Setup Golang
      if: ${{ inputs.setup_go == 'true' }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go_version }}
        cache: false

    - name: Start caching go
      shell: bash
      run: |
        echo "Start retrieving cache"

    - name: Restore Cache mod
      id: cache-restore-mod
      if: ${{ inputs.setup_restore_cache == 'true' }}
      uses: actions/cache/restore@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-mod-${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}

    - name: Restore Cache build
      id: cache-restore-build
      if: ${{ inputs.setup_restore_cache == 'true' }}
      uses: actions/cache/restore@v3
      with:
        path: ~/.cache/go-build
        key: ${{ runner.os }}-go-build-${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}

    - name: End caching go
      shell: bash
      run: |
        echo "End retrieving cache"

    - name: Configure Git for private modules
      env:
        USER: ${{ inputs.gh_user }}
        TOKEN: ${{ inputs.gh_token }}
      shell: bash
      run: git config --global url."https://${USER}:${TOKEN}@github.com".insteadOf "https://github.com"

    - name: setup custom command
      if: ${{ inputs.custom_command_flag == 'true' }}
      shell: bash
      run: ${{ inputs.custom_command }}

    - name: Setuptools infra
      uses: kitabisa/composite-actions/infra/tools/setuptools@v2
      with:
        setup_buildx: true

    - name: Setup Gcloud credential
      uses: kitabisa/composite-actions/infra/tools/gcloud@v2
      with:
        artifact_registry_host: ${{ inputs.artifact_registry_host }}
        project_id: ${{ inputs.project_id }}
        credentials_json: ${{ inputs.credentials_json }}
        gke_creds: false

    - name: Start build
      shell: bash
      run: |
        echo "Start building application"

    - name: Build application
      id: build-app
      uses: kitabisa/composite-actions/infra/tools/makefile@v2
      with:
        build: ${{ inputs.build }}
        working_directory: ${{ inputs.working_directory }}
        project_id: ${{ inputs.project_id }}
        artifact_registry_host: ${{ inputs.artifact_registry_host }}
        artifact_registry_project_id: ${{ inputs.artifact_registry_project_id }}
        package: ${{ inputs.build_push_image }}

    - name: set output
      shell: bash
      run: |
        # Perform actions
        echo "Setting output..."
        echo "::set-output name=build-app-status::true"

    - name: Install the gh cli
      if: ${{ inputs.setup_save_cache == 'true' }}
      uses: ksivamuthu/actions-setup-gh-cli@v2
      with:
        version: 2.24.3

    - name: Delete Previous Cache Mod
      if: ${{ steps.cache-restore-mod.outputs.cache-hit || inputs.setup_save_cache == 'true' }}
      continue-on-error: true
      shell: bash
      run: |
        gh extension install actions/gh-actions-cache
        gh actions-cache delete "${{ runner.os }}-go-mod-${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}" --confirm
      env:
        GH_TOKEN: ${{ inputs.gh_token }}

    - name: Save Cache Mod
      if: ${{ inputs.setup_save_cache == 'true' }}
      uses: actions/cache/save@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-mod-${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}

    - name: Delete Previous Cache Build
      if: ${{ steps.cache-restore-build.outputs.cache-hit || inputs.setup_save_cache == 'true' }}
      continue-on-error: true
      shell: bash
      run: |
        gh actions-cache delete "${{ runner.os }}-go-build-${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}" --confirm
      env:
        GH_TOKEN: ${{ inputs.gh_token }}

    - name: Save Cache Build
      if: ${{ inputs.setup_save_cache == 'true' }}
      uses: actions/cache/save@v3
      with:
        path: ~/.cache/go-build
        key: ${{ runner.os }}-go-build-${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}
