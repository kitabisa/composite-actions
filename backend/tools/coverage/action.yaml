name: "Generate Coverage"
description: "generate coverage badge for readme"

inputs:
  working_directory:
    required: false
    description: "Set working directory"
    default: "."
    type: string

  gh_user:
    required: true
    description: "gh user"

  gh_token:
    required: true
    description: "gh token"

  badge_path:
    required: false
    description: "badge path for coverage"
    default: ".github/badges/code-coverage.svg"

  go_version:
    required: false
    description: "go version"
    default: "~1.22"

  custom_command_flag:
    required: false
    description: "custom command flag"
    default: "false"

  custom_command:
    required: false
    description: "custom command"
    default: "echo no command"

  unit_test_command:
    required: false
    description: "unit test command"
    default: "go test ./internal/... -coverprofile=coverage.out -covermode=atomic"

  hash_files:
    required: false
    description: "hash files"
    default: "**"

  setup_go_cache:
    required: false
    description: "go version"
    default: "false"

  setup_action_cache:
    required: false
    description: "setup cache"
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.head_ref }}
        token: ${{ inputs.gh_token }}

    - name: Setup Golang
      uses: actions/setup-go@v5
      with:
        cache: ${{ inputs.setup_go_cache }}
        go-version: ${{ inputs.go_version }}

    - name: Determine Golang cache paths and construct cache key
      id: golang-env
      run: |
        echo "build-cache-path=$(go env GOCACHE)" >>"$GITHUB_OUTPUT"
        echo "module-cache-path=$(go env GOMODCACHE)" >>"$GITHUB_OUTPUT"
        cacheKeyRoot="${{ runner.os }}-golang${{ inputs.cache-key-suffix && format('-{0}',inputs.cache-key-suffix) }}-"
        echo "cache-key-restore=$cacheKeyRoot" >>"$GITHUB_OUTPUT"
        echo "cache-key=${cacheKeyRoot}${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}" >>"$GITHUB_OUTPUT"
      shell: bash

    - name: Setup Golang cache
      if: ${{ inputs.setup_action_cache == 'true'}}
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.golang-env.outputs.build-cache-path }}
          ${{ steps.golang-env.outputs.module-cache-path }}
        key: ${{ steps.golang-env.outputs.cache-key }}
        restore-keys: |
          ${{ steps.golang-env.outputs.cache-key-restore }}

    - name: Configure Git for private modules
      env:
        USER: ${{ inputs.gh_user }}
        TOKEN: ${{ inputs.gh_token }}
      shell: bash
      run: git config --global url."https://${USER}:${TOKEN}@github.com".insteadOf "https://github.com"

    - name: Generate Master Coverage
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        echo "current_master_coverage=$(cat coverage-master.txt)" >> $GITHUB_ENV

    - name: Custom Command
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: "${{ inputs.custom_command_flag == 'true' }}"
      run: ${{ inputs.custom_command }}

    - name: Start running unit test
      shell: bash
      run: |
        echo "Start running unit test"

    - name: Run Unit tests
      id: unit-test-current
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |-
        ${{ inputs.unit_test_command }}
        echo $(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}') > coverage-master.txt
        echo "current_coverage=$(go tool cover -func coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')" >> $GITHUB_ENV

    - name: Finish running unit test
      shell: bash
      run: |
        echo "Finish running unit test"

    - name: Create destination directory
      shell: bash
      run: mkdir -p "${{ inputs.badge_path }}%/*"

    - name: Generate badge SVG image
      uses: emibcn/badge-action@v2.0.3
      id: badge
      with:
        label: 'Code coverage'
        status: ${{ env.current_coverage }}
        color: 'green'
        path: ${{ inputs.badge_path }}

    - name: Upload badge as artifact
      uses: actions/upload-artifact@v4
      with:
        name: badge
        path: ${{ inputs.badge_path }}
        if-no-files-found: error

    - name: Push coverage master to git
      uses: stefanzweifel/git-auto-commit-action@v5
      continue-on-error: true
      with:
        commit_message: 'coverage: updated coverage [skip ci]'
        file_pattern: '${{ inputs.working_directory }}/coverage-master.txt ${{ inputs.badge_path }}'
