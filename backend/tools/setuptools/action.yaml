name: "Setup dependencies tools" # Install & preparation tools
description: "Setup dependencies tools"

inputs:
  gh_user:
    required: true
    description: "gh user"

  gh_token:
    required: true
    description: "gh token"

  setup_git:
    required: false
    description: "Setup git"
    default: 'true'

  cache:
    required: false
    description: "Activate cache"
    default: 'false'

  enhanced_cache:
    required: false
    description: "Activate enhanced cache"
    default: 'false'

  setup_go:
    required: false
    description: "Setup Go"
    default: 'true'

  go_version:
    required: false
    description: "go version"
    default: "^1.13.1"

  custom_command_flag:
    required: false
    description: "custom command flag"
    default: "false"

  custom_command:
    required: false
    description: "custom command"
    default: "echo no command"

  hash_files:
    required: false
    description: "hashFiles location"
    default: "**"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.gh_token }}

    - name: Setup docker buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure Git for private modules
      if: "${{ inputs.setup_git == 'true' }}"
      env:
        USER: ${{ inputs.gh_user }}
        TOKEN: ${{ inputs.gh_token }}
      shell: bash
      run: git config --global url."https://${USER}:${TOKEN}@github.com".insteadOf "https://github.com"

    - name: Setup Golang
      uses: actions/setup-go@v5
      if: "${{ inputs.setup_go == 'true' }}"
      with:
        go-version: ${{ inputs.go_version }}
        cache: false

    - name: Setup Golang caches
      if: "${{ inputs.cache == 'true' }}"
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-golang-${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}
        restore-keys: |
          ${{ runner.os }}-golang-

    # enhanced caching mechanism
    - name: Determine Golang cache paths and construct cache key
      if: "${{ inputs.enhanced_cache == 'true' }}"
      id: golang-env
      run: |
        echo "build-cache-path=$(go env GOCACHE)" >>"$GITHUB_OUTPUT"
        echo "module-cache-path=$(go env GOMODCACHE)" >>"$GITHUB_OUTPUT"
        cacheKeyRoot="${{ runner.os }}-golang${{ inputs.cache_key_suffix && format('-{0}',inputs.cache_key_suffix) }}-"
        echo "cache-key-restore=$cacheKeyRoot" >>"$GITHUB_OUTPUT"
        echo "cache-key=${cacheKeyRoot}${{ hashFiles(format('{0}/{1}',inputs.hash_files,'go.sum')) }}" >>"$GITHUB_OUTPUT"
      shell: bash

    - name: Setup Golang cache
      if: "${{ inputs.enhanced_cache == 'true' }}"
      uses: actions/cache/restore@v4
      with:
        path: |
          ${{ steps.golang-env.outputs.build-cache-path }}
          ${{ steps.golang-env.outputs.module-cache-path }}
        key: ${{ steps.golang-env.outputs.cache-key }}
        restore-keys: |
          ${{ steps.golang-env.outputs.cache-key-restore }}

    - name: Custom Command
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: "${{ inputs.custom_command_flag == 'true' }}"
      run: ${{ inputs.custom_command }}
