name: "CI Build"
description: "Build and push docker image"

inputs:
  # Required
  gh_token:
    required: true
    description: "Github token"

  artifact_registry_host:
    required: true
    description: "Artifact registry host"
    type: string

  artifact_registry_project_id:
    required: true
    description: "Artifact registry project id"
    type: string

  credentials_json:
    required: true
    description: "GCP credentials services account"
    type: string

  project_id:
    required: true
    description: "GCP project id"
    type: string

  gke_cluster_name:
    required: true
    description: "GKE cluster name"
    type: string

  gke_cluster_zone:
    required: true
    description: "GKE cluster location zone"
    type: string

  custom_command_flag:
    required: false
    description: "custom command flag"
    default: "false"

  custom_command:
    required: false
    description: "custom command"
    default: "echo no command"

  param:
    required: false
    description: "argument for service name"
    default: ""
    type: string

  env:
    required: true
    description: "environment to deploy to"
    default: "dev"

  rancher_host:
    required: true
    description: "Rancher host"

  rancher_access_key:
    required: true
    description: "Rancher access key"

  rancher_secret_key:
    required: true
    description: "Rancher secret key"

  rancher_cluster_id:
    required: true
    description: "Rancher cluster id"

  working_directory:
    required: false
    description: "Set working directory"
    default: "."
    type: string

  deploy:
    required: false
    description: "Run make deploy"
    default: "true"
    type: string

  deploy-kj:
    required: false
    description: "Run make deploy-kj"
    default: "false"
    type: string

  deploy_test:
    required: false
    description: "Run make deploy-test"
    default: "false"
    type: string

  service_name:
    required: false
    type: string
    default: ""

  jira_cloud_api_user:
    required: false
    type: string

  jira_cloud_api_token:
    required: false
    type: string

runs:
  using: "composite"
  steps:
    - name: Checking out repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.gh_token }}

    - name: Create env deployment
      uses: chrnorm/deployment-action@v2
      id: deployment
      with:
        token: ${{ inputs.gh_token }}
        environment: ${{ inputs.env }}

    - name: setup custom command
      if: ${{ inputs.custom_command_flag == 'true' }}
      shell: bash
      run: ${{ inputs.custom_command }}

    - name: Setup GHCR credential
      uses: kitabisa/composite-actions/infra/tools/ghcr-credential@v2
      with:
        gh_token: ${{ inputs.gh_token }}

    - name: Setup Gcloud credential
      uses: kitabisa/composite-actions/infra/tools/gcloud@v2
      with:
        artifact_registry_host: ${{ inputs.artifact_registry_host }}
        project_id: ${{ inputs.project_id }}
        credentials_json: ${{ inputs.credentials_json }}
        gke_cluster_name: ${{ inputs.gke_cluster_name }}
        gke_cluster_zone: ${{ inputs.gke_cluster_zone }}

    - name: Deploy
      uses: kitabisa/composite-actions/infra/tools/makefile@v2
      with:
        param: ${{ inputs.param }}
        working_directory: ${{ inputs.working_directory }}
        project_id: ${{ inputs.project_id }}
        artifact_registry_host: ${{ inputs.artifact_registry_host }}
        artifact_registry_project_id: ${{ inputs.artifact_registry_project_id }}
        deploy: ${{ inputs.deploy }}
        deploy-kj: ${{ inputs.deploy-kj }}
        deploy_test: ${{ inputs.deploy_test }}

    - name: Rancher ns mover
      if: "${{ inputs.deploy_test != 'true' }}"
      uses: kitabisa/composite-actions/infra/tools/rancher@v2
      with:
        working_directory: ${{ inputs.working_directory }}
        param: ${{ inputs.param }}
        deploy: ${{ inputs.deploy }}
        deploy-kj: ${{ inputs.deploy-kj }}
        rancher_host: ${{ inputs.rancher_host }}
        rancher_access_key: ${{ inputs.rancher_access_key }}
        rancher_secret_key: ${{ inputs.rancher_secret_key }}
        rancher_cluster_id: ${{ inputs.rancher_cluster_id }}

    - uses: chrnorm/deployment-status@v2
      if: success()
      name: Set env deployment success
      with:
        token: ${{ inputs.gh_token }}
        state: "success"
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}

    - uses: chrnorm/deployment-status@v2
      if: failure()
      name: Set env deployment failure
      with:
        token: ${{ inputs.gh_token }}
        state: "failure"
        deployment-id: ${{ steps.deployment.outputs.deployment_id }}

    - name: Set Fix Version in Jira
      if: "${{ inputs.env == 'prod' }}"
      env:
        JIRA_URL: https://kitabisa.atlassian.net
        JIRA_USERNAME: ${{ inputs.JIRA_CLOUD_API_USER }}
        JIRA_API_TOKEN: ${{ inputs.JIRA_CLOUD_API_TOKEN }}
        SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
      run: |
        #!/bin/bash
        set -e

        echo "Service: $SERVICE_NAME"

        CURRENT_TAG=$(git describe --tags --abbrev=0)
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)

        echo "Current tag: $CURRENT_TAG"
        echo "Previous tag: $PREVIOUS_TAG"

        commit_messages=$(git log ${PREVIOUS_TAG}...${CURRENT_TAG} --pretty=format:%s)
        echo "Commit messages: $commit_messages"

        jira_keys=$(echo "$commit_messages" | grep -oE '[A-Z]+-[0-9]+' | sort -u)
        if [ -z "$jira_keys" ]; then
          echo "No Jira issue keys found."
          exit 0
        fi

        echo "Jira keys: $jira_keys"

        declare -A created_projects

        START_DATE=$(git log -1 --format=%cs "$PREVIOUS_TAG")
        RELEASE_DATE=$(git log -1 --format=%cs "$CURRENT_TAG")

        for issue_key in $jira_keys; do
          PROJECT_KEY=$(echo "$issue_key" | cut -d'-' -f1)
          VERSION_NAME="${SERVICE_NAME}-${CURRENT_TAG}"

          if [ -z "${created_projects[$PROJECT_KEY]}" ]; then
            echo "Creating version $VERSION_NAME in $PROJECT_KEY..."

            curl -X POST \
              -u "$JIRA_USERNAME:$JIRA_API_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{
                \"name\": \"$VERSION_NAME\",
                \"project\": \"$PROJECT_KEY\",
                \"startDate\": \"$START_DATE\",
                \"releaseDate\": \"$RELEASE_DATE\",
                \"released\": true
              }" \
              "$JIRA_URL/rest/api/2/version"

            created_projects["$PROJECT_KEY"]=1
          fi

          echo "Updating $issue_key with fixVersion $VERSION_NAME..."

          curl -X PUT \
            -u "$JIRA_USERNAME:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
              \"update\": {
                \"fixVersions\": [
                  { \"set\": [ { \"name\": \"$VERSION_NAME\" } ] }
                ]
              }
            }" \
            "$JIRA_URL/rest/api/2/issue/$issue_key"

        # Add a comment
        COMMENT="This issue was released as part of version $VERSION_NAME on $RELEASE_DATE."
        echo "Adding comment to $issue_key"

        curl -X POST \
          -u "$JIRA_USERNAME:$JIRA_API_TOKEN" \
          -H "Content-Type: application/json" \
          -d "{
          \"body\": \"$COMMENT\"
        }" \
        "$JIRA_URL/rest/api/2/issue/$issue_key/comment"

        done

      shell: bash
